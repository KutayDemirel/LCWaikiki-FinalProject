// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniCommerce.Persistence.DbContexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MiniCommerce.Persistence.Migrations
{
    [DbContext(typeof(MiniCommerceDbContext))]
    [Migration("20220616225517_mig_1")]
    partial class mig_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW VISION"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "XSIDE"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW CLASSIC"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW CASUAL"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW BASIC"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW FORMAL"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk zamanlarda bire bir",
                            Name = "Mont"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Baharda üşümeyin tutar",
                            Name = "Hırka ve Süveter"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kışın üşümeyin diye",
                            Name = "Kazak"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Şık zamanların tercihi",
                            Name = "Gömlek"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Güneşin keyfini çıkar",
                            Name = "Tişört"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Favorilerini seç soğuktan korun",
                            Name = "Sweatshirt"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rahat pantolonlarla kendini keşfet",
                            Name = "Jean"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Güzel görünmenin vakti",
                            Name = "Elbise"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Siyah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sarı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kırmızı"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beyaz"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pembe"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yeşil"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bej"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mavi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gri"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 50.00m,
                            ProductId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 250.00m,
                            ProductId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 230.00m,
                            ProductId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 280.00m,
                            ProductId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 271.00m,
                            ProductId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 85.00m,
                            ProductId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 70.00m,
                            ProductId = 3,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 90.00m,
                            ProductId = 4,
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Price = 92.00m,
                            ProductId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Price = 85.00m,
                            ProductId = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Price = 205.00m,
                            ProductId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 78.00m,
                            ProductId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 95.00m,
                            ProductId = 9,
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 56.00m,
                            ProductId = 10,
                            UserId = 3
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 76.00m,
                            ProductId = 11,
                            UserId = 4
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 63.00m,
                            ProductId = 12,
                            UserId = 4
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 84.00m,
                            ProductId = 12,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsOfferable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UsageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UsageId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 4,
                            CategoryId = 1,
                            ColorId = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWCASUALBejMont.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Slim Fit Kapüşonlu İnce Erkek Kanguru Mont",
                            Price = 309.99m,
                            Stock = 1,
                            UsageId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 4,
                            CategoryId = 1,
                            ColorId = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWCASUALPembeMont.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Dik Yaka Düz Uzun Kollu İnce Kadın Mont",
                            Price = 319.99m,
                            Stock = 1,
                            UsageId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 5,
                            CategoryId = 2,
                            ColorId = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWBASICBeyazHirka.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Düz Uzun Kollu Viskon Kadın Hırka",
                            Price = 59.99m,
                            Stock = 1,
                            UsageId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 2,
                            ColorId = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "XSIDEYeşilHırka.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Dik Yaka Düz Uzun Kollu Crop Kadın Hırka",
                            Price = 109.99m,
                            Stock = 1,
                            UsageId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            CategoryId = 3,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWVISIONSarıKazak.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Uzun Kollu Erkek Triko Kazak",
                            Price = 139.99m,
                            Stock = 1,
                            UsageId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 4,
                            CategoryId = 3,
                            ColorId = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWCASUALKirmiziKazak.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Düz Uzun Kollu Kadın Triko Kazak",
                            Price = 99.99m,
                            Stock = 1,
                            UsageId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 6,
                            CategoryId = 4,
                            ColorId = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWFORMALMaviGomlek.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Slim Fit Uzun Kollu Poplin Erkek Gömlek",
                            Price = 289.99m,
                            Stock = 1,
                            UsageId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            CategoryId = 4,
                            ColorId = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWVISIONBeyazGomlek.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Önden Düğme Kapamalı Düz Kısa Kollu Poplin Kadın Gömlek",
                            Price = 149.99m,
                            Stock = 1,
                            UsageId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 2,
                            CategoryId = 5,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "XSIDESarıTisort.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Baskılı Kısa Kollu Pamuklu Crop Kadın Tişört",
                            Price = 99.99m,
                            Stock = 1,
                            UsageId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 4,
                            CategoryId = 5,
                            ColorId = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWCASUALSiyahTisort.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Polo Yaka Kısa Kollu Pike Erkek Tişört",
                            Price = 149.99m,
                            Stock = 1,
                            UsageId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 2,
                            CategoryId = 6,
                            ColorId = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "XSIDEMaviSweatShirt.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Kapüşon Yaka Nakışlı Uzun Kollu Kadın Sweatshirt",
                            Price = 89.99m,
                            Stock = 1,
                            UsageId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 2,
                            CategoryId = 6,
                            ColorId = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "XSIDEYeşilSweatShirt.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Kapüşonlu Uzun Kollu Baskılı Erkek Sweatshirt",
                            Price = 199.99m,
                            Stock = 1,
                            UsageId = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 4,
                            CategoryId = 7,
                            ColorId = 9,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWCASULGriJean.jpg",
                            IsOfferable = false,
                            IsSold = false,
                            Name = "750 Slim Fit Erkek Jean Pantolon",
                            Price = 189.99m,
                            Stock = 1,
                            UsageId = 1,
                            UserId = 7
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 1,
                            CategoryId = 8,
                            ColorId = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWVISIONYesilElbise.jpg",
                            IsOfferable = false,
                            IsSold = false,
                            Name = "Halter Yaka Düz Kolsuz Kadın Elbise",
                            Price = 199.99m,
                            Stock = 1,
                            UsageId = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 3,
                            CategoryId = 8,
                            ColorId = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hayatın keyfini çıkarın",
                            ImageUrl = "LCWCASUALPembeElbise.jpg",
                            IsOfferable = false,
                            IsSold = false,
                            Name = "U Yaka Düz Askılı A Kesim Poplin Kadın Elbise",
                            Price = 199.99m,
                            Stock = 1,
                            UsageId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Usage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yeni"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Az Kullanılmış"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Çok Kullanılmış"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "e75a9ef3-4358-4d1d-b75a-b51ed77054d2",
                            Email = "kutay@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Kutay",
                            LastName = "Demirel",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUTAY@SEEDDATA.COM",
                            NormalizedUserName = "KUTAY@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOmWYZlMpMeowRqVU42bkFTtizThbu630cu5fU2Cnh4ltN7+gwyhVpeEmh6jyaXeww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e330673-5a92-4603-9da7-3ac4b6f53b25",
                            TwoFactorEnabled = false,
                            UserName = "kutay@seeddata.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "aa2eb667-2e85-4473-bc38-556e076ef982",
                            Email = "lale@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Lale",
                            LastName = "Gezer",
                            LockoutEnabled = false,
                            NormalizedEmail = "LALE@SEEDDATA.COM",
                            NormalizedUserName = "LALE@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBbEqLcKxydd3m3zTDgJ74paOKx6uWwObpFOIVnqGmXGzz8IMPgHX7nV60IZSNlknQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96e41dce-e385-4a0e-a241-2afbffcdf5d7",
                            TwoFactorEnabled = false,
                            UserName = "lale@seeddata.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "3715e4f0-307f-4b44-8afc-8831a5b616d8",
                            Email = "mehmet@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            LastName = "Turan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@SEEDDATA.COM",
                            NormalizedUserName = "MEHMET@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMuT292bXv9uZYFzEURA3xiX/YvmZ8zKt7jwcxkCQpQlpvnJbA9T5wK3yn+l75rGsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28c68f35-d8e0-40e8-9a8b-1d5fae9d4b93",
                            TwoFactorEnabled = false,
                            UserName = "mehmet@seeddata.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "e6aff20a-4256-4025-93a2-d86544418e60",
                            Email = "sezer@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Sezer",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEZER@SEEDDATA.COM",
                            NormalizedUserName = "SEZER@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA3W/ii7VAwyY4F1T+IDTE4TwfbiCxpTEIKXOD05/uHoippkAjXLV1LeRg3NHGr+AA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84908030-83c1-4e61-a9d6-0f2aa7325845",
                            TwoFactorEnabled = false,
                            UserName = "sezer@seeddata.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "2cd43b4c-01ce-43d0-81c9-ba3a0e124b0e",
                            Email = "mert@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            LastName = "Durmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT@SEEDDATA.COM",
                            NormalizedUserName = "MERT@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMBMvWjGehJh9TO0U6wIhmP90tUvpMjoqFQ0pf0fU/2LMEeXxZbc/JZI/Jf/AsCQCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78ce31a5-21b4-4b81-9c85-1a82e3b2c357",
                            TwoFactorEnabled = false,
                            UserName = "mert@seeddata.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "adb8531a-12da-4a55-978b-341805d5c6f6",
                            Email = "kaan@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Kaan",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAAN@SEEDDATA.COM",
                            NormalizedUserName = "KAAN@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHlbuyUy+mPQ/OivDuKbuVFPMmd6s5GE39sGUuSiP+hk+p3Ih4QwESbryzE7Nht7yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e91665c-26d2-427f-bd3c-8230ec368d08",
                            TwoFactorEnabled = false,
                            UserName = "kaan@seeddata.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "4ab76ec3-cbd7-47c5-8f9d-6fe82f68fe5d",
                            Email = "bora@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Bora",
                            LastName = "Kırılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "BORA@SEEDDATA.COM",
                            NormalizedUserName = "BORA@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA8zGy7Av0RoHjsBx7yS7/SKjf/kRgdGSpciDxB73GIP0/9YL0BGhH9UW45XLhnkAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c98325a-47cb-4884-8a7b-7cc483c9055b",
                            TwoFactorEnabled = false,
                            UserName = "bora@seeddata.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "492866b0-cfe3-4fd1-b880-c18a717f368f",
                            Email = "ahmet@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            LastName = "Yıkılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@SEEDDATA.COM",
                            NormalizedUserName = "AHMET@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOveZRmI0mhNjAzrUEMEGLUgFMLlAJwKFMrUSOjFxc3P66rbnNqUWdMqrE9WjAIEvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a29330e5-7cf6-412d-97ec-b19cd969ee94",
                            TwoFactorEnabled = false,
                            UserName = "ahmet@seeddata.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "b90d0562-67fd-4074-b625-93f1c5655262",
                            Email = "fatma@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            LastName = "Gedik",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA@SEEDDATA.COM",
                            NormalizedUserName = "FATMA@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENpVZvEkPNKKbpOueVayIGvi2ihHTvBzFgBO98AVs5ikKiofu33rbdSIx1pwmTfUyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8047a17-eeeb-47b4-b5ef-bbab55b33063",
                            TwoFactorEnabled = false,
                            UserName = "fatma@seeddata.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "e8efd284-722c-4c68-8fd0-e160ddc205cb",
                            Email = "ezgi@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Ezgi",
                            LastName = "Dene",
                            LockoutEnabled = false,
                            NormalizedEmail = "EZGI@SEEDDATA.COM",
                            NormalizedUserName = "EZGI@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB0PxtZSluYYx+HsL9VpFTcTsnEJsCzUrytUAxgZnQsLJcjPO+fAEqwsuUYdrwwTVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b209ab1-d936-4d63-9850-7d901f684428",
                            TwoFactorEnabled = false,
                            UserName = "ezgi@seeddata.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Offer", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Product", "Product")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MiniCommerce.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId");

                    b.HasOne("MiniCommerce.Domain.Entities.Usage", "Usage")
                        .WithMany("Products")
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Usage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Usage", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.User", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
