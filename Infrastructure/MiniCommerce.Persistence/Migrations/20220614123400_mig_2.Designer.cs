// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniCommerce.Persistence.DbContexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MiniCommerce.Persistence.Migrations
{
    [DbContext(typeof(MiniCommerceDbContext))]
    [Migration("20220614123400_mig_2")]
    partial class mig_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW VISION"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "XSIDE"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW CLASSIC"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW CASUAL"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW BASIC"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCW FORMAL"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            Name = "Mont"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            Name = "Hırka ve Süveter"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            Name = "Kazak"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Keten Rahatlığı",
                            Name = "Gömlek"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Güneşin keyfini çıkar",
                            Name = "Tişört"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Favorilerini seç, en trend ürünleri keşfet",
                            Name = "Sweatshirt"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sezonun en hit parçalarını keşfet",
                            Name = "Jean"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "demodemodemo",
                            Name = "Elbise"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Siyah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sarı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kırmızı"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beyaz"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pembe"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yeşil"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bej"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mavi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gri"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 50.00m,
                            ProductId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 250.00m,
                            ProductId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 230.00m,
                            ProductId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 280.00m,
                            ProductId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 271.00m,
                            ProductId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 85.00m,
                            ProductId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 70.00m,
                            ProductId = 3,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 90.00m,
                            ProductId = 4,
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Price = 92.00m,
                            ProductId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Price = 85.00m,
                            ProductId = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Price = 205.00m,
                            ProductId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 78.00m,
                            ProductId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 95.00m,
                            ProductId = 9,
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 56.00m,
                            ProductId = 10,
                            UserId = 3
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 76.00m,
                            ProductId = 11,
                            UserId = 4
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 63.00m,
                            ProductId = 12,
                            UserId = 4
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 84.00m,
                            ProductId = 12,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 95.00m,
                            ProductId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 56.00m,
                            ProductId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 76.00m,
                            ProductId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 63.00m,
                            ProductId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 95.00m,
                            ProductId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 56.00m,
                            ProductId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 76.00m,
                            ProductId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 63.00m,
                            ProductId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 95.00m,
                            ProductId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 56.00m,
                            ProductId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 76.00m,
                            ProductId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 63.00m,
                            ProductId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 95.00m,
                            ProductId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 56.00m,
                            ProductId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 76.00m,
                            ProductId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = false,
                            Price = 63.00m,
                            ProductId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsOfferable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UsageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UsageId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 4,
                            CategoryId = 1,
                            ColorId = 7,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWCASUALBejMont.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Slim Fit Kapüşonlu İnce Erkek Kanguru Mont",
                            Price = 309.99m,
                            Stock = 400,
                            UsageId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 4,
                            CategoryId = 1,
                            ColorId = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWCASUALPembeMont.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Dik Yaka Düz Uzun Kollu İnce Kadın Mont",
                            Price = 319.99m,
                            Stock = 400,
                            UsageId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 5,
                            CategoryId = 2,
                            ColorId = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWBASICBeyazHirka.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Düz Uzun Kollu Viskon Kadın Hırka",
                            Price = 59.99m,
                            Stock = 400,
                            UsageId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 2,
                            ColorId = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "XSIDEYeşilHırka.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Dik Yaka Düz Uzun Kollu Crop Kadın Hırka",
                            Price = 109.99m,
                            Stock = 400,
                            UsageId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            CategoryId = 3,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWVISIONSarıKazak.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Uzun Kollu Erkek Triko Kazak",
                            Price = 139.99m,
                            Stock = 400,
                            UsageId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 4,
                            CategoryId = 3,
                            ColorId = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWCASUALKirmiziKazak.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Düz Uzun Kollu Kadın Triko Kazak",
                            Price = 99.99m,
                            Stock = 400,
                            UsageId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 6,
                            CategoryId = 4,
                            ColorId = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWFORMALMaviGomlek.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Slim Fit Uzun Kollu Poplin Erkek Gömlek",
                            Price = 289.99m,
                            Stock = 400,
                            UsageId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            CategoryId = 4,
                            ColorId = 4,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWVISIONBeyazGomlek.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Önden Düğme Kapamalı Düz Kısa Kollu Poplin Kadın Gömlek",
                            Price = 149.99m,
                            Stock = 400,
                            UsageId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 2,
                            CategoryId = 5,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "XSIDESarıTisort.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Baskılı Kısa Kollu Pamuklu Crop Kadın Tişört",
                            Price = 99.99m,
                            Stock = 400,
                            UsageId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 4,
                            CategoryId = 5,
                            ColorId = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWCASUALSiyahTisort.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Polo Yaka Kısa Kollu Pike Erkek Tişört",
                            Price = 149.99m,
                            Stock = 400,
                            UsageId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 2,
                            CategoryId = 6,
                            ColorId = 8,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "XSIDEMaviSweatShirt.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Kapüşon Yaka Nakışlı Uzun Kollu Kadın Sweatshirt",
                            Price = 89.99m,
                            Stock = 400,
                            UsageId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 2,
                            CategoryId = 6,
                            ColorId = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "XSIDEYeşilSweatShirt.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Kapüşonlu Uzun Kollu Baskılı Erkek Sweatshirt",
                            Price = 199.99m,
                            Stock = 400,
                            UsageId = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 4,
                            CategoryId = 7,
                            ColorId = 9,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWCASULGriJean.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "750 Slim Fit Erkek Jean Pantolon",
                            Price = 189.99m,
                            Stock = 400,
                            UsageId = 1,
                            UserId = 7
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 1,
                            CategoryId = 8,
                            ColorId = 6,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWVISIONYesilElbise.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Halter Yaka Düz Kolsuz Kadın Elbise",
                            Price = 199.99m,
                            Stock = 400,
                            UsageId = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 3,
                            CategoryId = 8,
                            ColorId = 5,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soğuk kış günleri üşümeyin diye",
                            ImageUrl = "LCWCASUALPembeElbise.jpg",
                            IsOfferable = true,
                            IsSold = false,
                            Name = "U Yaka Düz Askılı A Kesim Poplin Kadın Elbise",
                            Price = 199.99m,
                            Stock = 400,
                            UsageId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Usage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yeni"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Az Kullanılmış"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Çok Kullanılmış"
                        });
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "3029a764-6a3a-449e-97f7-47e894dd2ac2",
                            Email = "kutay@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Kutay",
                            LastName = "Demirel",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUTAY@SEEDDATA.COM",
                            NormalizedUserName = "KUTAY@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEALXsS2eMsatIkudmIF5qogcN6ZnspRIyp0zyD/5aD4tkDP+fONfQ05QkBxeLYChBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d831826-8f58-4919-b74d-b1c3047e9887",
                            TwoFactorEnabled = false,
                            UserName = "kutay@seeddata.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "b4b38e6c-f26d-4704-bb4b-61f6e92d185f",
                            Email = "lale@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Lale",
                            LastName = "Gezer",
                            LockoutEnabled = false,
                            NormalizedEmail = "LALE@SEEDDATA.COM",
                            NormalizedUserName = "LALE@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFEnKoYWDA5REwdDVuhIcUNCgCBkiELLCPGSOptZYHD4SG8+atYUBeA3p7iCaQLMQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "caa06908-1d9c-40d6-9a6b-456031cab0fb",
                            TwoFactorEnabled = false,
                            UserName = "lale@seeddata.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "2f29f285-da46-4794-a452-2dd5cec34131",
                            Email = "mehmet@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            LastName = "Turan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@SEEDDATA.COM",
                            NormalizedUserName = "MEHMET@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFEBJ2aAY8OF95Pfm5luVfZP3vLvRXlMTevtSXCcaW4iweM4HCFD9sHW9KqAmi9hhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cc2d5c3-33e9-4ede-afdf-503684ed36d9",
                            TwoFactorEnabled = false,
                            UserName = "mehmet@seeddata.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "647cf05e-b262-4e21-9df8-b4cf81815168",
                            Email = "sezer@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Sezer",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEZER@SEEDDATA.COM",
                            NormalizedUserName = "SEZER@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEDiiJllm9DYkq+LMts6An+5esmY7528Ct/irlOYb5VkyURU6v9HHXKPQsw0MXx1bQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "312abd5e-23c1-47e1-9e77-602247dfcedd",
                            TwoFactorEnabled = false,
                            UserName = "sezer@seeddata.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "abd10ed4-f9a9-474c-8205-feba049d588d",
                            Email = "mert@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            LastName = "Durmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT@SEEDDATA.COM",
                            NormalizedUserName = "MERT@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKSocIG+Ir3icu3g9dVI8wnH/tYn6WLQZ2sbCOsN340IrtSwLWwo2z9hTaxduPOiHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a59d923-7ab4-4b92-819e-09cda269ea6a",
                            TwoFactorEnabled = false,
                            UserName = "mert@seeddata.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "f5f538bc-e164-4603-9b1c-8da14e95ee87",
                            Email = "kaan@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Kaan",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAAN@SEEDDATA.COM",
                            NormalizedUserName = "KAAN@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIatt06se/WvOl1i7zLt+MAWqnx6WVhxBMKMmHypymu95W5/GUXS6k+TxuJwLDunsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2ce2e00-af6b-4553-a703-137e74d3a00c",
                            TwoFactorEnabled = false,
                            UserName = "kaan@seeddata.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "2d55178d-0f01-4171-b565-21963fb513f4",
                            Email = "bora@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Bora",
                            LastName = "Kırılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "BORA@SEEDDATA.COM",
                            NormalizedUserName = "BORA@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFU80SAZq6i4Fkj4e0hFqtjSDHiOt6hCrmXK6XcfGPo7AznDD1V3i4lMH1XL5ECJHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c5c855a-a702-4499-ac07-ef9ecdbbd9d4",
                            TwoFactorEnabled = false,
                            UserName = "bora@seeddata.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "e2b6682d-e098-4f82-985d-10d15fa6414d",
                            Email = "ahmet@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            LastName = "Yıkılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@SEEDDATA.COM",
                            NormalizedUserName = "AHMET@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDuTTpyXo5BphC91PqRxYnQCt72cQSjiug1gm7JS7/jaGQRrTxqLJsQjC33UBkk2lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fc68e24-659c-4927-a50f-4313cf388918",
                            TwoFactorEnabled = false,
                            UserName = "ahmet@seeddata.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "e261c270-f554-48d0-8bf9-5e8e6abe77ec",
                            Email = "fatma@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            LastName = "Gedik",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA@SEEDDATA.COM",
                            NormalizedUserName = "FATMA@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED+vV6YtNtgKXzdwbFdT+a+RyAyxvTb9NKmRsZ4lgZAMddORoLT50Ypu7qPo50WUHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a64ff488-a17d-4403-a61e-7b4e644eb3fb",
                            TwoFactorEnabled = false,
                            UserName = "fatma@seeddata.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "İzmir",
                            ConcurrencyStamp = "967790e2-4bee-4bfc-9cf8-b059a06fd57c",
                            Email = "ezgi@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Ezgi",
                            LastName = "Dene",
                            LockoutEnabled = false,
                            NormalizedEmail = "EZGI@SEEDDATA.COM",
                            NormalizedUserName = "EZGI@SEEDDATA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPFWCkkTKIysTmTVweg6GLTqrzzU0IfQnk2MipD2/NunjAi7tggrShLzo+RkHOldoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51cc305e-29dd-49cf-99f9-8e7fa71fef59",
                            TwoFactorEnabled = false,
                            UserName = "ezgi@seeddata.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Offer", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Product", "Product")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("MiniCommerce.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MiniCommerce.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId");

                    b.HasOne("MiniCommerce.Domain.Entities.Usage", "Usage")
                        .WithMany("Products")
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniCommerce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Usage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.Usage", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiniCommerce.Domain.Entities.User", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
